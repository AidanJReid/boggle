{"filter":false,"title":"test_boggle.py","tooltip":"/test_boggle.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":49,"column":15},"end":{"row":49,"column":16},"action":"insert","lines":["="],"id":387}],[{"start":{"row":49,"column":16},"end":{"row":49,"column":17},"action":"insert","lines":[" "],"id":388}],[{"start":{"row":49,"column":17},"end":{"row":49,"column":19},"action":"insert","lines":["()"],"id":389}],[{"start":{"row":49,"column":18},"end":{"row":49,"column":19},"action":"insert","lines":["1"],"id":390},{"start":{"row":49,"column":19},"end":{"row":49,"column":20},"action":"insert","lines":[","]}],[{"start":{"row":49,"column":20},"end":{"row":49,"column":21},"action":"insert","lines":[" "],"id":391},{"start":{"row":49,"column":21},"end":{"row":49,"column":22},"action":"insert","lines":["2"]}],[{"start":{"row":49,"column":23},"end":{"row":50,"column":0},"action":"insert","lines":["",""],"id":392},{"start":{"row":50,"column":0},"end":{"row":50,"column":8},"action":"insert","lines":["        "]},{"start":{"row":50,"column":8},"end":{"row":50,"column":9},"action":"insert","lines":["n"]},{"start":{"row":50,"column":9},"end":{"row":50,"column":10},"action":"insert","lines":["e"]},{"start":{"row":50,"column":10},"end":{"row":50,"column":11},"action":"insert","lines":["i"]},{"start":{"row":50,"column":11},"end":{"row":50,"column":12},"action":"insert","lines":["g"]},{"start":{"row":50,"column":12},"end":{"row":50,"column":13},"action":"insert","lines":["h"]},{"start":{"row":50,"column":13},"end":{"row":50,"column":14},"action":"insert","lines":["b"]},{"start":{"row":50,"column":14},"end":{"row":50,"column":15},"action":"insert","lines":["o"]},{"start":{"row":50,"column":15},"end":{"row":50,"column":16},"action":"insert","lines":["u"]},{"start":{"row":50,"column":16},"end":{"row":50,"column":17},"action":"insert","lines":["r"]},{"start":{"row":50,"column":17},"end":{"row":50,"column":18},"action":"insert","lines":["s"]}],[{"start":{"row":50,"column":18},"end":{"row":50,"column":19},"action":"insert","lines":[" "],"id":393},{"start":{"row":50,"column":19},"end":{"row":50,"column":20},"action":"insert","lines":["="]}],[{"start":{"row":50,"column":20},"end":{"row":50,"column":21},"action":"insert","lines":[" "],"id":394},{"start":{"row":50,"column":21},"end":{"row":50,"column":22},"action":"insert","lines":["b"]},{"start":{"row":50,"column":22},"end":{"row":50,"column":23},"action":"insert","lines":["o"]},{"start":{"row":50,"column":23},"end":{"row":50,"column":24},"action":"insert","lines":["g"]},{"start":{"row":50,"column":24},"end":{"row":50,"column":25},"action":"insert","lines":["g"]},{"start":{"row":50,"column":25},"end":{"row":50,"column":26},"action":"insert","lines":["l"]},{"start":{"row":50,"column":26},"end":{"row":50,"column":27},"action":"insert","lines":["e"]},{"start":{"row":50,"column":27},"end":{"row":50,"column":28},"action":"insert","lines":["."]},{"start":{"row":50,"column":28},"end":{"row":50,"column":29},"action":"insert","lines":["n"]}],[{"start":{"row":50,"column":29},"end":{"row":50,"column":30},"action":"insert","lines":["e"],"id":395},{"start":{"row":50,"column":30},"end":{"row":50,"column":31},"action":"insert","lines":["i"]},{"start":{"row":50,"column":31},"end":{"row":50,"column":32},"action":"insert","lines":["g"]},{"start":{"row":50,"column":32},"end":{"row":50,"column":33},"action":"insert","lines":["h"]},{"start":{"row":50,"column":33},"end":{"row":50,"column":34},"action":"insert","lines":["b"]},{"start":{"row":50,"column":34},"end":{"row":50,"column":35},"action":"insert","lines":["o"]},{"start":{"row":50,"column":35},"end":{"row":50,"column":36},"action":"insert","lines":["u"]},{"start":{"row":50,"column":36},"end":{"row":50,"column":37},"action":"insert","lines":["r"]},{"start":{"row":50,"column":37},"end":{"row":50,"column":38},"action":"insert","lines":["s"]}],[{"start":{"row":50,"column":38},"end":{"row":50,"column":39},"action":"insert","lines":["_"],"id":396},{"start":{"row":50,"column":39},"end":{"row":50,"column":40},"action":"insert","lines":["o"]},{"start":{"row":50,"column":40},"end":{"row":50,"column":41},"action":"insert","lines":["f"]},{"start":{"row":50,"column":41},"end":{"row":50,"column":42},"action":"insert","lines":["_"]},{"start":{"row":50,"column":42},"end":{"row":50,"column":43},"action":"insert","lines":["p"]},{"start":{"row":50,"column":43},"end":{"row":50,"column":44},"action":"insert","lines":["o"]},{"start":{"row":50,"column":44},"end":{"row":50,"column":45},"action":"insert","lines":["s"]},{"start":{"row":50,"column":45},"end":{"row":50,"column":46},"action":"insert","lines":["i"]},{"start":{"row":50,"column":46},"end":{"row":50,"column":47},"action":"insert","lines":["t"]},{"start":{"row":50,"column":47},"end":{"row":50,"column":48},"action":"insert","lines":["i"]}],[{"start":{"row":50,"column":48},"end":{"row":50,"column":49},"action":"insert","lines":["o"],"id":397},{"start":{"row":50,"column":49},"end":{"row":50,"column":50},"action":"insert","lines":["n"]},{"start":{"row":50,"column":50},"end":{"row":50,"column":51},"action":"insert","lines":["s"]}],[{"start":{"row":50,"column":51},"end":{"row":50,"column":53},"action":"insert","lines":["()"],"id":398}],[{"start":{"row":50,"column":52},"end":{"row":50,"column":53},"action":"insert","lines":["c"],"id":399},{"start":{"row":50,"column":53},"end":{"row":50,"column":54},"action":"insert","lines":["o"]},{"start":{"row":50,"column":54},"end":{"row":50,"column":55},"action":"insert","lines":["o"]},{"start":{"row":50,"column":55},"end":{"row":50,"column":56},"action":"insert","lines":["r"]},{"start":{"row":50,"column":56},"end":{"row":50,"column":57},"action":"insert","lines":["d"]},{"start":{"row":50,"column":57},"end":{"row":50,"column":58},"action":"insert","lines":["s"]}],[{"start":{"row":50,"column":59},"end":{"row":51,"column":0},"action":"insert","lines":["",""],"id":400},{"start":{"row":51,"column":0},"end":{"row":51,"column":8},"action":"insert","lines":["        "]},{"start":{"row":51,"column":8},"end":{"row":51,"column":9},"action":"insert","lines":["s"]},{"start":{"row":51,"column":9},"end":{"row":51,"column":10},"action":"insert","lines":["e"]},{"start":{"row":51,"column":10},"end":{"row":51,"column":11},"action":"insert","lines":["l"]},{"start":{"row":51,"column":11},"end":{"row":51,"column":12},"action":"insert","lines":["f"]}],[{"start":{"row":51,"column":12},"end":{"row":51,"column":13},"action":"insert","lines":["."],"id":401},{"start":{"row":51,"column":13},"end":{"row":51,"column":14},"action":"insert","lines":["a"]},{"start":{"row":51,"column":14},"end":{"row":51,"column":15},"action":"insert","lines":["s"]},{"start":{"row":51,"column":15},"end":{"row":51,"column":16},"action":"insert","lines":["s"]},{"start":{"row":51,"column":16},"end":{"row":51,"column":17},"action":"insert","lines":["e"]},{"start":{"row":51,"column":17},"end":{"row":51,"column":18},"action":"insert","lines":["r"]},{"start":{"row":51,"column":18},"end":{"row":51,"column":19},"action":"insert","lines":["t"]}],[{"start":{"row":51,"column":19},"end":{"row":51,"column":20},"action":"insert","lines":["I"],"id":402},{"start":{"row":51,"column":20},"end":{"row":51,"column":21},"action":"insert","lines":["n"]}],[{"start":{"row":51,"column":21},"end":{"row":51,"column":23},"action":"insert","lines":["()"],"id":403}],[{"start":{"row":51,"column":22},"end":{"row":51,"column":24},"action":"insert","lines":["()"],"id":404}],[{"start":{"row":51,"column":23},"end":{"row":51,"column":24},"action":"insert","lines":["0"],"id":405},{"start":{"row":51,"column":24},"end":{"row":51,"column":25},"action":"insert","lines":[","]}],[{"start":{"row":51,"column":25},"end":{"row":51,"column":26},"action":"insert","lines":[" "],"id":406},{"start":{"row":51,"column":26},"end":{"row":51,"column":27},"action":"insert","lines":["1"]}],[{"start":{"row":51,"column":28},"end":{"row":51,"column":29},"action":"insert","lines":[","],"id":407}],[{"start":{"row":51,"column":29},"end":{"row":51,"column":30},"action":"insert","lines":[" "],"id":408},{"start":{"row":51,"column":30},"end":{"row":51,"column":31},"action":"insert","lines":["n"]},{"start":{"row":51,"column":31},"end":{"row":51,"column":32},"action":"insert","lines":["e"]},{"start":{"row":51,"column":32},"end":{"row":51,"column":33},"action":"insert","lines":["g"]},{"start":{"row":51,"column":33},"end":{"row":51,"column":34},"action":"insert","lines":["h"]},{"start":{"row":51,"column":34},"end":{"row":51,"column":35},"action":"insert","lines":["b"]}],[{"start":{"row":51,"column":34},"end":{"row":51,"column":35},"action":"remove","lines":["b"],"id":409},{"start":{"row":51,"column":33},"end":{"row":51,"column":34},"action":"remove","lines":["h"]},{"start":{"row":51,"column":32},"end":{"row":51,"column":33},"action":"remove","lines":["g"]}],[{"start":{"row":51,"column":32},"end":{"row":51,"column":33},"action":"insert","lines":["i"],"id":410},{"start":{"row":51,"column":33},"end":{"row":51,"column":34},"action":"insert","lines":["g"]},{"start":{"row":51,"column":34},"end":{"row":51,"column":35},"action":"insert","lines":["h"]},{"start":{"row":51,"column":35},"end":{"row":51,"column":36},"action":"insert","lines":["b"]},{"start":{"row":51,"column":36},"end":{"row":51,"column":37},"action":"insert","lines":["o"]},{"start":{"row":51,"column":37},"end":{"row":51,"column":38},"action":"insert","lines":["u"]},{"start":{"row":51,"column":38},"end":{"row":51,"column":39},"action":"insert","lines":["r"]},{"start":{"row":51,"column":39},"end":{"row":51,"column":40},"action":"insert","lines":["s"]}],[{"start":{"row":51,"column":41},"end":{"row":52,"column":0},"action":"insert","lines":["",""],"id":411},{"start":{"row":52,"column":0},"end":{"row":52,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":52,"column":8},"end":{"row":52,"column":41},"action":"insert","lines":["self.assertIn((0, 1), neighbours)"],"id":412}],[{"start":{"row":52,"column":41},"end":{"row":53,"column":0},"action":"insert","lines":["",""],"id":413},{"start":{"row":53,"column":0},"end":{"row":53,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":53,"column":8},"end":{"row":53,"column":41},"action":"insert","lines":["self.assertIn((0, 1), neighbours)"],"id":414}],[{"start":{"row":53,"column":41},"end":{"row":54,"column":0},"action":"insert","lines":["",""],"id":415},{"start":{"row":54,"column":0},"end":{"row":54,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":54,"column":8},"end":{"row":54,"column":41},"action":"insert","lines":["self.assertIn((0, 1), neighbours)"],"id":416}],[{"start":{"row":54,"column":41},"end":{"row":55,"column":0},"action":"insert","lines":["",""],"id":417},{"start":{"row":55,"column":0},"end":{"row":55,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":55,"column":8},"end":{"row":55,"column":41},"action":"insert","lines":["self.assertIn((0, 1), neighbours)"],"id":418}],[{"start":{"row":55,"column":41},"end":{"row":56,"column":0},"action":"insert","lines":["",""],"id":419},{"start":{"row":56,"column":0},"end":{"row":56,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":56,"column":8},"end":{"row":56,"column":41},"action":"insert","lines":["self.assertIn((0, 1), neighbours)"],"id":420}],[{"start":{"row":52,"column":26},"end":{"row":52,"column":27},"action":"remove","lines":["1"],"id":421}],[{"start":{"row":52,"column":26},"end":{"row":52,"column":27},"action":"insert","lines":["2"],"id":422}],[{"start":{"row":53,"column":26},"end":{"row":53,"column":27},"action":"remove","lines":["1"],"id":423}],[{"start":{"row":53,"column":26},"end":{"row":53,"column":27},"action":"insert","lines":["3"],"id":424}],[{"start":{"row":54,"column":23},"end":{"row":54,"column":24},"action":"remove","lines":["0"],"id":425}],[{"start":{"row":54,"column":23},"end":{"row":54,"column":24},"action":"insert","lines":["1"],"id":426}],[{"start":{"row":55,"column":26},"end":{"row":55,"column":27},"action":"remove","lines":["1"],"id":427}],[{"start":{"row":55,"column":26},"end":{"row":55,"column":27},"action":"insert","lines":["2"],"id":428}],[{"start":{"row":55,"column":26},"end":{"row":55,"column":27},"action":"remove","lines":["2"],"id":429}],[{"start":{"row":55,"column":26},"end":{"row":55,"column":27},"action":"insert","lines":["3"],"id":430}],[{"start":{"row":55,"column":23},"end":{"row":55,"column":24},"action":"remove","lines":["0"],"id":431}],[{"start":{"row":55,"column":23},"end":{"row":55,"column":24},"action":"insert","lines":["1"],"id":432}],[{"start":{"row":56,"column":23},"end":{"row":56,"column":24},"action":"remove","lines":["0"],"id":433}],[{"start":{"row":56,"column":23},"end":{"row":56,"column":24},"action":"insert","lines":["2"],"id":434}],[{"start":{"row":56,"column":41},"end":{"row":57,"column":0},"action":"insert","lines":["",""],"id":435},{"start":{"row":57,"column":0},"end":{"row":57,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":57,"column":8},"end":{"row":57,"column":41},"action":"insert","lines":["self.assertIn((0, 1), neighbours)"],"id":436}],[{"start":{"row":57,"column":41},"end":{"row":58,"column":0},"action":"insert","lines":["",""],"id":437},{"start":{"row":58,"column":0},"end":{"row":58,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":58,"column":8},"end":{"row":58,"column":41},"action":"insert","lines":["self.assertIn((0, 1), neighbours)"],"id":438}],[{"start":{"row":58,"column":41},"end":{"row":59,"column":0},"action":"insert","lines":["",""],"id":439},{"start":{"row":59,"column":0},"end":{"row":59,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":59,"column":8},"end":{"row":59,"column":41},"action":"insert","lines":["self.assertIn((0, 1), neighbours)"],"id":440}],[{"start":{"row":57,"column":26},"end":{"row":57,"column":27},"action":"remove","lines":["1"],"id":441}],[{"start":{"row":57,"column":26},"end":{"row":57,"column":27},"action":"insert","lines":["2"],"id":442}],[{"start":{"row":57,"column":23},"end":{"row":57,"column":24},"action":"remove","lines":["0"],"id":443}],[{"start":{"row":57,"column":23},"end":{"row":57,"column":24},"action":"insert","lines":["2"],"id":444}],[{"start":{"row":58,"column":23},"end":{"row":58,"column":24},"action":"remove","lines":["0"],"id":445}],[{"start":{"row":58,"column":23},"end":{"row":58,"column":24},"action":"insert","lines":["2"],"id":446}],[{"start":{"row":58,"column":26},"end":{"row":58,"column":27},"action":"remove","lines":["1"],"id":447}],[{"start":{"row":58,"column":26},"end":{"row":58,"column":27},"action":"insert","lines":["3"],"id":448}],[{"start":{"row":58,"column":41},"end":{"row":59,"column":41},"action":"remove","lines":["","        self.assertIn((0, 1), neighbours)"],"id":449}],[{"start":{"row":58,"column":41},"end":{"row":59,"column":0},"action":"insert","lines":["",""],"id":450},{"start":{"row":59,"column":0},"end":{"row":59,"column":8},"action":"insert","lines":["        "]},{"start":{"row":59,"column":8},"end":{"row":60,"column":0},"action":"insert","lines":["",""]},{"start":{"row":60,"column":0},"end":{"row":60,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":60,"column":4},"end":{"row":60,"column":8},"action":"remove","lines":["    "],"id":451}],[{"start":{"row":60,"column":4},"end":{"row":70,"column":73},"action":"insert","lines":["def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))"],"id":452}],[{"start":{"row":0,"column":0},"end":{"row":70,"column":73},"action":"remove","lines":["import unittest","import boggle","from string import ascii_uppercase","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","    ","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0,0)","        self.assertEqual(len(grid),0)","        ","    def test_grid_size_is_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid  = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","        ","    def test_grid_coordinates(self):","        \"\"\"","        Test to ensure that all the coordinates","        inside of the grid can be accessed","        \"\"\"","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","        ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates","        in the grid contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","            ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_positions(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","        ","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))"],"id":453},{"start":{"row":0,"column":0},"end":{"row":68,"column":73},"action":"insert","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))"]}],[{"start":{"row":0,"column":0},"end":{"row":68,"column":73},"action":"remove","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))"],"id":454},{"start":{"row":0,"column":0},"end":{"row":102,"column":46},"action":"insert","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))","    ","    def test_converting_a_path_to_a_word(self):","        \"\"\"","        Ensure that paths can be converted to words","        \"\"\"","        grid = boggle.make_grid(2, 2)","        oneLetterWord = boggle.path_to_word(grid, [(0, 0)])","        twoLetterWord = boggle.path_to_word(grid, [(0, 0), (1, 1)])","        self.assertEqual(oneLetterWord, grid[(0, 0)])","        self.assertEqual(twoLetterWord, grid[(0, 0)] + grid[(1, 1)])","    ","    def test_search_grid_for_words(self):","        \"\"\"","        Ensure that certain patterns can be found in a `path_to_word`","        \"\"\"","        grid = {(0, 0): 'A', (0, 1): 'B', (1, 0): 'C', (1, 1): 'D'}","        twoLetterWord = 'AB'","        threeLetterWord = 'ABC'","        notThereWord = 'EEE'","        dictionary = [twoLetterWord, threeLetterWord, notThereWord]","","        foundWords = boggle.search(grid, dictionary)","","        self.assertTrue(twoLetterWord in foundWords)","        self.assertTrue(threeLetterWord in foundWords)","        self.assertTrue(notThereWord not in foundWords)","    ","    def test_load_dictionary(self):","        \"\"\"","        Test that the `get_dictionary` function returns a dictionary","        that has a length greater than 0","        \"\"\"","        dictionary = boggle.get_dictionary('words.txt')","        self.assertGreater(len(dictionary), 0)"]}],[{"start":{"row":87,"column":28},"end":{"row":88,"column":0},"action":"insert","lines":["",""],"id":455},{"start":{"row":88,"column":0},"end":{"row":88,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":89,"column":17},"end":{"row":89,"column":18},"action":"remove","lines":["y"],"id":456},{"start":{"row":89,"column":16},"end":{"row":89,"column":17},"action":"remove","lines":["r"]},{"start":{"row":89,"column":15},"end":{"row":89,"column":16},"action":"remove","lines":["a"]},{"start":{"row":89,"column":14},"end":{"row":89,"column":15},"action":"remove","lines":["n"]},{"start":{"row":89,"column":13},"end":{"row":89,"column":14},"action":"remove","lines":["o"]},{"start":{"row":89,"column":12},"end":{"row":89,"column":13},"action":"remove","lines":["i"]},{"start":{"row":89,"column":11},"end":{"row":89,"column":12},"action":"remove","lines":["t"]},{"start":{"row":89,"column":10},"end":{"row":89,"column":11},"action":"remove","lines":["c"]},{"start":{"row":89,"column":9},"end":{"row":89,"column":10},"action":"remove","lines":["i"]},{"start":{"row":89,"column":8},"end":{"row":89,"column":9},"action":"remove","lines":["d"]}],[{"start":{"row":89,"column":8},"end":{"row":89,"column":9},"action":"insert","lines":["f"],"id":457},{"start":{"row":89,"column":9},"end":{"row":89,"column":10},"action":"insert","lines":["u"]},{"start":{"row":89,"column":10},"end":{"row":89,"column":11},"action":"insert","lines":["l"]},{"start":{"row":89,"column":11},"end":{"row":89,"column":12},"action":"insert","lines":["l"]},{"start":{"row":89,"column":12},"end":{"row":89,"column":13},"action":"insert","lines":["w"]},{"start":{"row":89,"column":13},"end":{"row":89,"column":14},"action":"insert","lines":["o"]},{"start":{"row":89,"column":14},"end":{"row":89,"column":15},"action":"insert","lines":["r"]},{"start":{"row":89,"column":15},"end":{"row":89,"column":16},"action":"insert","lines":["d"]},{"start":{"row":89,"column":16},"end":{"row":89,"column":17},"action":"insert","lines":["s"]}],[{"start":{"row":89,"column":66},"end":{"row":90,"column":0},"action":"insert","lines":["",""],"id":458},{"start":{"row":90,"column":0},"end":{"row":90,"column":8},"action":"insert","lines":["        "]},{"start":{"row":90,"column":8},"end":{"row":90,"column":9},"action":"insert","lines":["s"]},{"start":{"row":90,"column":9},"end":{"row":90,"column":10},"action":"insert","lines":["t"]},{"start":{"row":90,"column":10},"end":{"row":90,"column":11},"action":"insert","lines":["e"]},{"start":{"row":90,"column":11},"end":{"row":90,"column":12},"action":"insert","lines":["m"]},{"start":{"row":90,"column":12},"end":{"row":90,"column":13},"action":"insert","lines":["s"]}],[{"start":{"row":90,"column":13},"end":{"row":90,"column":14},"action":"insert","lines":[" "],"id":459},{"start":{"row":90,"column":14},"end":{"row":90,"column":15},"action":"insert","lines":["="]}],[{"start":{"row":90,"column":15},"end":{"row":90,"column":16},"action":"insert","lines":[" "],"id":460}],[{"start":{"row":90,"column":16},"end":{"row":90,"column":18},"action":"insert","lines":["[]"],"id":461}],[{"start":{"row":90,"column":17},"end":{"row":90,"column":19},"action":"insert","lines":["''"],"id":462}],[{"start":{"row":90,"column":18},"end":{"row":90,"column":19},"action":"insert","lines":["A"],"id":463}],[{"start":{"row":90,"column":20},"end":{"row":90,"column":21},"action":"insert","lines":[","],"id":464}],[{"start":{"row":90,"column":21},"end":{"row":90,"column":22},"action":"insert","lines":[" "],"id":465}],[{"start":{"row":90,"column":22},"end":{"row":90,"column":24},"action":"insert","lines":["''"],"id":466}],[{"start":{"row":90,"column":23},"end":{"row":90,"column":24},"action":"insert","lines":["A"],"id":467},{"start":{"row":90,"column":24},"end":{"row":90,"column":25},"action":"insert","lines":["B"]}],[{"start":{"row":90,"column":26},"end":{"row":90,"column":27},"action":"insert","lines":[","],"id":468}],[{"start":{"row":90,"column":27},"end":{"row":90,"column":28},"action":"insert","lines":[" "],"id":469}],[{"start":{"row":90,"column":28},"end":{"row":90,"column":30},"action":"insert","lines":["''"],"id":470}],[{"start":{"row":90,"column":29},"end":{"row":90,"column":30},"action":"insert","lines":["E"],"id":471}],[{"start":{"row":90,"column":31},"end":{"row":90,"column":32},"action":"insert","lines":[","],"id":472}],[{"start":{"row":90,"column":32},"end":{"row":90,"column":33},"action":"insert","lines":[" "],"id":473}],[{"start":{"row":90,"column":33},"end":{"row":90,"column":35},"action":"insert","lines":["''"],"id":474}],[{"start":{"row":90,"column":34},"end":{"row":90,"column":35},"action":"insert","lines":["E"],"id":475},{"start":{"row":90,"column":35},"end":{"row":90,"column":36},"action":"insert","lines":["E"]}],[{"start":{"row":90,"column":38},"end":{"row":91,"column":0},"action":"insert","lines":["",""],"id":476},{"start":{"row":91,"column":0},"end":{"row":91,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":91,"column":8},"end":{"row":91,"column":9},"action":"insert","lines":["i"],"id":477}],[{"start":{"row":91,"column":8},"end":{"row":91,"column":9},"action":"remove","lines":["i"],"id":478}],[{"start":{"row":91,"column":8},"end":{"row":91,"column":9},"action":"insert","lines":["d"],"id":479},{"start":{"row":91,"column":9},"end":{"row":91,"column":10},"action":"insert","lines":["i"]},{"start":{"row":91,"column":10},"end":{"row":91,"column":11},"action":"insert","lines":["c"]},{"start":{"row":91,"column":11},"end":{"row":91,"column":12},"action":"insert","lines":["t"]},{"start":{"row":91,"column":12},"end":{"row":91,"column":13},"action":"insert","lines":["i"]},{"start":{"row":91,"column":13},"end":{"row":91,"column":14},"action":"insert","lines":["o"]},{"start":{"row":91,"column":14},"end":{"row":91,"column":15},"action":"insert","lines":["n"]},{"start":{"row":91,"column":15},"end":{"row":91,"column":16},"action":"insert","lines":["a"]},{"start":{"row":91,"column":16},"end":{"row":91,"column":17},"action":"insert","lines":["r"]},{"start":{"row":91,"column":17},"end":{"row":91,"column":18},"action":"insert","lines":["y"]}],[{"start":{"row":91,"column":18},"end":{"row":91,"column":19},"action":"insert","lines":[" "],"id":480},{"start":{"row":91,"column":19},"end":{"row":91,"column":20},"action":"insert","lines":["="]}],[{"start":{"row":91,"column":20},"end":{"row":91,"column":21},"action":"insert","lines":[" "],"id":481},{"start":{"row":91,"column":21},"end":{"row":91,"column":22},"action":"insert","lines":["s"]},{"start":{"row":91,"column":22},"end":{"row":91,"column":23},"action":"insert","lines":["t"]},{"start":{"row":91,"column":23},"end":{"row":91,"column":24},"action":"insert","lines":["e"]},{"start":{"row":91,"column":24},"end":{"row":91,"column":25},"action":"insert","lines":["m"]},{"start":{"row":91,"column":25},"end":{"row":91,"column":26},"action":"insert","lines":["w"]},{"start":{"row":91,"column":26},"end":{"row":91,"column":27},"action":"insert","lines":["o"]},{"start":{"row":91,"column":27},"end":{"row":91,"column":28},"action":"insert","lines":["r"]},{"start":{"row":91,"column":28},"end":{"row":91,"column":29},"action":"insert","lines":["d"]},{"start":{"row":91,"column":29},"end":{"row":91,"column":30},"action":"insert","lines":["s"]}],[{"start":{"row":91,"column":29},"end":{"row":91,"column":30},"action":"remove","lines":["s"],"id":482},{"start":{"row":91,"column":28},"end":{"row":91,"column":29},"action":"remove","lines":["d"]},{"start":{"row":91,"column":27},"end":{"row":91,"column":28},"action":"remove","lines":["r"]},{"start":{"row":91,"column":26},"end":{"row":91,"column":27},"action":"remove","lines":["o"]},{"start":{"row":91,"column":25},"end":{"row":91,"column":26},"action":"remove","lines":["w"]},{"start":{"row":91,"column":24},"end":{"row":91,"column":25},"action":"remove","lines":["m"]},{"start":{"row":91,"column":23},"end":{"row":91,"column":24},"action":"remove","lines":["e"]},{"start":{"row":91,"column":22},"end":{"row":91,"column":23},"action":"remove","lines":["t"]},{"start":{"row":91,"column":21},"end":{"row":91,"column":22},"action":"remove","lines":["s"]}],[{"start":{"row":91,"column":21},"end":{"row":91,"column":22},"action":"insert","lines":["f"],"id":483},{"start":{"row":91,"column":22},"end":{"row":91,"column":23},"action":"insert","lines":["u"]},{"start":{"row":91,"column":23},"end":{"row":91,"column":24},"action":"insert","lines":["l"]}],[{"start":{"row":91,"column":21},"end":{"row":91,"column":24},"action":"remove","lines":["ful"],"id":484},{"start":{"row":91,"column":21},"end":{"row":91,"column":30},"action":"insert","lines":["fullwords"]}],[{"start":{"row":91,"column":30},"end":{"row":91,"column":31},"action":"insert","lines":[","],"id":485}],[{"start":{"row":91,"column":31},"end":{"row":91,"column":32},"action":"insert","lines":[" "],"id":486},{"start":{"row":91,"column":32},"end":{"row":91,"column":33},"action":"insert","lines":["s"]},{"start":{"row":91,"column":33},"end":{"row":91,"column":34},"action":"insert","lines":["t"]},{"start":{"row":91,"column":34},"end":{"row":91,"column":35},"action":"insert","lines":["e"]},{"start":{"row":91,"column":35},"end":{"row":91,"column":36},"action":"insert","lines":["m"]}],[{"start":{"row":91,"column":32},"end":{"row":91,"column":36},"action":"remove","lines":["stem"],"id":487},{"start":{"row":91,"column":32},"end":{"row":91,"column":37},"action":"insert","lines":["stems"]}]]},"ace":{"folds":[],"scrolltop":1125,"scrollleft":0,"selection":{"start":{"row":91,"column":37},"end":{"row":91,"column":37},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":79,"state":"start","mode":"ace/mode/python"}},"timestamp":1571854720169,"hash":"b0851b4be0a1768cfaeafddad6b2865951c11839"}